C     ENLSIP DOUBLE PRECISION VERSION 841005
C 
CENLSIP
      SUBROUTINE ENLSIP(X,N,M,P,L,MDI,MDR,FFUNC,HFUNC,
     1 WINT,WREAL,
     2 EXIT,F,H,ACTIVE     )
      INTEGER N,M,P,L,MDI,MDR,EXIT
      INTEGER ACTIVE(1),WINT(N)
      DOUBLE PRECISION
     *     X(1),F(1),H(1),WREAL(M)
      EXTERNAL FFUNC,HFUNC
C
C   *****************************************************************
C   * THIS IS AN EASY-TO-USE VERSION OF THE SUBROUTINE NLSNIP.      *
C   * NLSNIP IS DEVELOPED BY PER LINDSTR\M AND PER-]KE WEDIN AT THE *
C   * INSTITUTE OF INFORMATION PROCESSING UNIVERSITY OF UME],       *
C   * S-90187 UME], SWEDEN                                          *
C   *****************************************************************
C
C     THE FOLLOWING INPUT PARAMETERS ARE GIVEN DEFAULT VALUES
C     PROVIDED THE USER HAS GIVEN A NEGATIVE VALUE TO THE
C     CORRESPONDING LOCATIONS IN THE AREAS WINT AND WREAL
C     RESPECTIVELY
C
C     IPRINT=1    (WRITE EVERY STEP)
C     NOUT=10     (WRITING IS DONE ON UNIT NO. 10)
C     MAXIT=20*N  (20 TIMES THE NO. OF PARAMETERS)
C     NORM=2      (EUCLIDEAN NORM FOR PENALTY UPDATING)
C     SCALE=0     (INTERNAL SCALING IS NOT USED WHEN THE SEARCH
C                  DIRECTION IS COMPUTED)
C     SEC=TRUE    (A SECOND DERIVATIVE (QP-BASED PROJECTED
C                  LAGRANGIAN) METHOD IS PERMITTED AT THE
C                  END OF THE ITERATION IN SOME SITUATIONS
C                  (LARGE RESIDULAS))
C     TOL= SQRT(DOUBLE RELATIVE PRECISION)
C     EPSREL= SQRT(DOUBLE RELATIVE PRECISION)
C     EPSABS= DOUBLE RELATIVE PRECISION
C     EPSX= SQRT(DOUBLE RELATIVE PRECISION)
C     EPSH= SQRT(DOUBLE RELATIVE PRECISION)
C     W(I)= 0 ;I=1,2,......,L
C       (I.E. THE INITIAL PENALTY WEIGHTS ARE CHOSEN AUTOMATICALLY)
C
C     PURPOSE...
C     SOLVE THE NONLINEAR LEAST SQUARES PROBLEM
C
C     MINIMIZE  0.5* II F(X) II**2
C        X
C          SUBJECT TO THE NONLINEAR CONSTRAINTS
C     H (X) = 0     I=1,2,.....,P   (P<=N)
C      I
C
C     H (X)   >= 0  J=P+1,....,L  (L>=P) , (M+P)>= N
C      J
C
C     WHERE F(X) IS M-DIMENSIONAL AND X IS N-DIMENSIONAL
C
C     THE DIMENSION OF SOME ARRAYS IN THE CALLING PROGRAM DEPENDS
C     ON BND=MIN(L,N)
C
C     ON ENTRY:
C
C     X()     REAL SINGLY SUBSCRIPTED ARRAY OF DIMENSION N
C             CONTAINING A FIRST APPROXIMATION OF THE SOLUTION POINT
C     N       INTEGER SCALAR CONTAINING THE NUMBER OF PARAMETERS
C     M       INTEGER SCALAR CONTAINING NUMBER OF RESIDUALS IN F(X)
C     P       INTEGER SCALAR CONTAINING NUMBER OF EQUALITY CONSTRAINTS
C     L       INTEGER SCALAR CONTAINING THE TOTAL NUMBER OF CONSTRAINTS
C     MDI     INTEGER SCALAR CONTAINING THE LENGTH OF THE WORKING
C             AREA WINT()   (SEE BELOW UNDER WORKING AREAS)
C     MDR     INTEGER SCALAR CONTAINING THE LENGTH OF THE WORKING
C             AREA WREAL()  (SEE BELOW UNDER WORKING AREAS)
C     THE FOLLOWING 11+L PARAMETERS ARE GIVEN DEFAULT VALUES PROVIDED
C     THE CORRESPONDING LOCATION IS < 0 ON ENTRY. THE DEFAULT VALUES
C     ARE GIVEN IN BRACKETS TOGETHER WITH THE ORIGINAL NAME OF
C     THE PARAMETER. WHERE APPLICABLE, THESE DEFAULT VALUES ARE RETURNED
C     IN THE CORRESPONDING LOCATION WHEN THE LOCATION IS <0 ON ENTRY.
C
C     WINT(1) (IPRINT=1) STEP BETWEEN WRITING
C     WINT(2) (NOUT=10) FORTRAN UNIT FOR WRITING
C     WINT(3) (MAXIT=20*N) MAXIMUM NO. OF PERMITTED ITERATIONS
C     WINT(4) (NORM=2) EUCLIDEAN NORM FOR UPDATING PENALTY WEIGHTS
C     WINT(5) (NO INTERNAL) INDICATOR FOR INTERNAL SCALING
C     WINT(6) (2:ND DERIVATIVES PERMITTED) INDICATOR FOR PERMITTING
C              A SECOND DERIVATIVE METHOD AT THE END
C     WREAL(1) (TOL=SQRT(DRELPR)) PSEUDO-RANK TOLERANCE CONSTANT
C     WREAL(2) (EPSREL=SQRT(DRELPR)) RELATIVE CONVERGENCE CONSTANT
C     WREAL(3) (EPSABS=DRELPR) ABSOLUTE CONVERGENCE CONSTANT
C     WREAL(4) (EPSX=SQRT(DRELPR)) PARAMETER CONVERGENCE CONSTANT
C     WREAL(5) (EPSH=SQRT(DRELPR)) CONSTRAINT CONVERGENCE CONSTANT
C     WREAL(I)  I=8,9,...,L+7 (W(I)) THE PENALTY WEIGHT CONSTANTS
C
C     FFUNC        SUBROUTINE NAME-USER WRITTEN SUBROUTINE WHICH
C                  EVALUATES THE FUNCTION F(X)
C     HFUNC        SUBROUTINE NAME-USER WRITTEN SUBROUTINE WHICH
C                  EVALUATES THE CONSTRAINTS H(X)
C                  BOTH FFUNC AND HFUNC MUST BE WRITTEN AS FOLLOWS
C                  (WITH THE OBVIOUS CHANGES FOR HFUNC)
C
C                  SUBROUTINE FFUNC(X,N,F,M,CTRL,C,MDC)
C                  INTEGER N,M,CTRL,MDC
C                  REAL X(N),F(M),C(MDC,N)
C                  -----------------------
C                  CTRL CAN HAVE 3 DIFFERENT VALUES ON ENTRY
C         CTRL= 1  MEANS EVALUATE THE FUNCTIONS AT THE POINT X AND
C                  RETURN THIS VECTOR IN THE ARRAY F IF THE FUNCTIONS
C                  ARE COMPUTABLE.
C                  ON RETURN THE USER CAN INDICATE UNCOMPUTABILITY BY
C                  SETTING CTRL=-1
C                  DO NOT ALTER ARRAY X.
C         CTRL=-1  MEANS EVALUATE THE FUNCTIONS AT THE POINT X AND
C                  RETURN THIS VECTOR IN THE ARRAY F IF THE FUNCTIONS
C                  ARE COMPUTABLE. DO NOT ALTER ARRAY X.
C                  POSSIBLE UNCOMPUTABILITY OF THE FUNCTIONS MUST BE
C                  INDICATED BY SETTING CTRL TO A VALUE <-10 ON RETURN
C         CTRL= 2  MEANS CALCULATE THE JACOBIAN OF F(X) AT THE POINT X
C                  AND RETURN THIS MATRIX IN THE ARRAY C IF THE JACOBIAN
C                  IS SUPPLIED ANALYTICALLY.
C                  POSSIBLE UNCOMPUTABILITY OF THE JACOBIAN MUST BE
C                  INDICATED BY SETTING CTRL TO A VALUE <-10 ON RETURN
C                  IF THE USER WANTS THE JACOBIAN BEING COMPUTED
C                  NUMERICALLY THAT SHOULD BE INDICATED BY SETTING
C                  CTRL=0 ON RETURN.
C                  DO NOT ALTER ARRAYS X AND F.
C                  ------------------------------
C                  RETURN
C                  END
C
C     ON RETURN:    AND EXIT .NE.-1  AND  EXIT.GE.-10
C
C     X()     CONTAINS THE TERMINATION POINT (HOPEFULLY THE SOLUTION)
C     P       CONTAINS NUMBER OF ACTIVE CONSTRAINTS AT X
C     EXIT    INTEGER SCALAR-CONTAINS A TERMINATION CODE REPRESENTING
C             THE TERMINATION CRITERIA DESCRIBED BELOW
C             =10000 IF CRITERION 4) IS SATISFIED
C             = 2000 IF CRITERION 5) IS SATISFIED
C             =  300 IF CRITERION 6) IS SATISFIED
C             =   40 IF CRITERION 7) IS SATISFIED
C             =    X IF CRITERION 8) IS SATISFIED
C                    WHERE X= 0,1,2,3 OR 4
C             EXIT CAN ALSO BE A SUM OF THE ABOVE CODES TO INDICATE
C             THAT MORE THAN ONE CRITERION IS SATISFIED
C
C             IF ANY OF THE ABNORMAL CRITERIA IS SATISFIED EXIT IS
C             SET TO
C
C             =   -1 IF IMPROPER DATA ON ENTRY TO THIS ROUTINE
C             =   -2 IF CRITERION  9) IS SATISFIED
C             =   -3 IF CRITERION 10) IS SATISFIED
C             =   -4 IF CRITERION 11) IS SATISFIED
C             =   -5 IF CRITERION 12) IS SATISFIED
C             =   -6 IF CRITERION 13) IS SATISFIED
C             =   -7 IF RESIDUALS OR CONSTRAINTS ARE UNCOMPUTABLE AT X
C             =   -8 IF MORE THAN N CONSTRAINTS IN FIRST WORKING
C                    SET (CHOOSE A BETTER STARTING POINT)
C             =   -9  IF TOO MANY (>5) NEWTON STEPS HAVE BEEN USED
C             < -10 TERMINATION DUE TO A USER STOP INDICATOR
C     THERE ARE CONVERGENCE CRITERIA AND ABNORMAL TERMINATION
C     CRITERIA
C     THE CONVERGENCE CRITERIA ARE ONLY TESTED IF THE LATEST STEP
C     WAS TAKEN ALONG A GAUSS-NEWTON DIRECTION WITH FULL PSEUDO RANK
C     OR IF THE METHOD OF NEWTON HAS BEEN USED IN THE LATEST STEP
C     OF COURCE THE STEP MUST NOT BE A RESTART STEP IF CONVERGENCE
C     SHOULD BE TESTED
C
C     A SEARCH DIRECTION USING GAUSS-NETON'S METHOD IS COMPUTED
C     BY SOLVING FOR DX    A*DX = -H
C                          C*DX APPR.= -F
C     A FIRST ORDER ESTIMATE OF THE LAGRANGE MULTIPLIERS (V) HAS BEEN
C     COMPUTED BY SOLVING FOR V     T
C                                  A *V APPR.= G (THE GRADIENT )
C     WHERE
C                     T                 -1   T
C           (L:0) = P1 *A*Q1      DY1= L  *P1 *(-H)
C                                       T
C           (C1:C2) = C*Q1      (U) = Q3 *C2*P3
C                               (0)
C                    T
C           D=(D1)=Q3 *(-F-C1*DY1)
C             (D2)
C
C     A NECESSARY CONDITION FOR CONVERGENCE IS THAT CONDITIONS
C     1)-3) BELOW ARE SATISFIED
C
C     THE CONVERGENCE CRITERIA ARE
C
C      1) II H(X) II < EPSH   (WHERE ONLY CONSTRAINTS IN THE WORKING
C             T                SET ARE CONSIDERED)
C      2) II A *V -G II < EPSREL*(1.0+II G(X) II)
C      3) SIGMIN >= EPSREL*ABSVMX
C                >= EPSREL*(1+II F(X) II**2)  (IF 1 INEQUALITY)
C      4) II D1 II**2 <= EPSREL**2*II F(X) II**2
C      5) II F(X) II**2 <= EPSABS**2
C      6) II X(K-1)-X(K) II < EPSX*II X(K) II   ( TIME STEP K)
C      7) SQRT(DRELPR)/II DX(GN) II >0.25 (GN=GAUSS NEWTON)
C      8) THE LAST DIGIT IN THE CONVERGENCE CODE (SEE BELOW) INDICATES
C         HOW THE LASTS STEPS WERE COMPUTED
C        = 0 NO TROUBLE (GAUSS-NEWTON THE LAST 3 STEPS)
C        = 1 RANKA<>T OR RANKC2<>(N-T) AT THE TERMINATION POINT
C            NO 2:ND DERIVATIVES HAS BEEN USED
C        = 2 THE METHOD OF NEWTON WAS USED (AT LEAST) IN THE LAST STEP
C        = 3 THE 2:ND BUT LAST STEP WAS SUBSPACE MINIMIZATION STEP
C            BUT THE LAST TWO WERE GAUSS-NEWTON STEPS
C        = 4 THE STEPLENGTH WAS NOT UNIT IN BOTH THE LAST 2 STEPS
C
C     THE ABNORMAL TERMINATION CRITERIA ARE
C
C      9) NUMBER OF ITERATIONS EXCEEDS THE MAXIMUM NUMBER
C     10) THE REDUCED HESSIAN EMANATING FROM THE METHOD OF NEWTON
C         IS NOT POSITIVE DEFINTE
C     11) THE USER HAS NOT ALLOWED USE OF 2:ND DERIVATIVES (NEWTON)
C     12) UNDAMPED NEWTON STEP FAILS
C     13) THE LATEST DX(GN) IS NOT A DESCENT DIRECTION TO THE MERIT
C         FUNCTION (PROBABLY CAUSED BY MISSCALCULATED JACOBIAN)
C
C     WINT(7) (ITER)INTEGER SCALAR-CONTAINS NUMBER OF ITERATIONS
C             UNTIL TERMINATION
C     WINT(8) (FUNCEV)INTEGER SCALAR-CONTAINS TOTAL NUMBER OF FUNCTION
C             EVALUATIONS DONE BY THE ALGORITHM
C     WINT(9) (JACEV)INTEGER SCALAR-CONTAINS THE NUMBER OF
C             JACOBIAN EVALUATIONS
C     WINT(10) (SECEV)INTEGER SCALAR-CONTAINS THE NO. OF FUNCTION
C              EVALUATIONS CAUSED BY THE 2:ND DERIVATIVE METHOD
C     WINT(11) (LINEV)INTEGER SCALAR-CONTAINS THE NO. OF FUNCTION
C              EVALUATIONS DONE BY THE LINESEARCH ALGORITHM
C     WINT(12) (RANKA)INTEGER SCALAR-CONTAINS THE ESTIMATED PSEUDO
C             RANK OF THE CONSTRAINT MATRIX (MATRIX A) AT THE
C             TERMINATION POINT. (RANKA=P IF FULL RANK)
C     WINT(13) (RANK)INTEGER SCALAR-CONTAINS ESTIMATED PSEUDO RANK OF
C             COMPOUND MATRIX (A) AT THE TERMINATION POINT
C                             (C)
C             RANK=N IF FULL RANK
C     WREAL(6) (PHI)REAL SCALAR-CONTAINS THE VALUE OF THE OBJECTIVE
C              FUNCTION AT THE TERMINATION POINT
C     WREAL(7) (SPEED)REAL SCALAR-CONTAINS AN ESTIMATE OF THE
C              CONVERGENCE FACTOR (SHOULD BE <=1)
C     WREAL(I) I=8,9,....,L+7 (W(I))REAL SINGLY SUBSCRIPTED ARRAY OF
C              DIMENSION L CONTAINING THE FINAL PENALTY CONSTANTS
C     F()     REAL SINGLY SUBSCRIPTED ARRAY OF DIMENSION M+L
C             CONTAINS THE VALUE OF THE RESIDUALS AT THE POINT X
C             AS THE FIRST M ELEMENTS
C     H()     REAL SINGLY SUBSCRIPTED ARRAY OF DIMENSION L
C             CONTAINS THE VALUE OF THE CONSTRAINTS AT THE POINT X
C     ACTIVE()INTEGER SINGLY SUBSCRIPTED ARRAY OF DIMENSION BND+L
C             CONTAINS INDECES FOR ACTIVE CONSTRAINTS AT THE POINT X
C             SUCH THAT ACTIVE(I) I=1,2,....,P ARE THE INDECES FOR THE
C             ACTIVE CONSTRAINTS
C
C     WORKING AREAS:
C
C     WINT() INTEGER SINGLY SUBSCRIPTED ARRAY OF DIMENSION MDI
C            (MDI MUST BE >=(2*(L+BND)+N+13))
C     WREAL() REAL SINGLY SUBSCRIPTED ARRAY OF DIMENSION MDR
C          (MDR MUST BE >=(N*(M+2*N+L+6)+3*(M+2*L)+4*BND+7)
C                    WHEN INEQUALITIES ARE PRESENT IN THE PROBLEM)
C          (MDR MUST BE >=(N*(M+N+L+6)+3*(M+2*L)+4*BND+7)
C                    WHEN THERE ARE ONLY EQUALITIES IN THE PROBLEM)
C
C     COMMON VARIABLES CONTAINING INFORMATION CONCERNING PREVIOUS
C     TWO POINTS. THE SUFFICES KM2 AND KM1 IN THE NAMES OF THE
C     VARIABLES REPRESENT TIME STEP K-2 AND K-1
C     THESE VARIABLES ARE UPDATED ONLY INSIDE THE ROUTINE EVREST
C
      INTEGER RKAKM2,RKCKM2,KODKM2,RKAKM1,RKCKM1,KODKM1,TKM2,TKM1
      DOUBLE PRECISION
     *     BETKM2,D1KM2,DKM2,FSQKM2,HSQKM2,B1KM2,DXNKM2,ALFKM2,
     1 BETKM1,D1KM1,DKM1,FSQKM1,HSQKM1,B1KM1,DXNKM1,ALFKM1,
     2 PGRESS,PRELIN
      COMMON /PREC/ BETKM2,D1KM2,DKM2,FSQKM2,HSQKM2,B1KM2,DXNKM2,
     1 ALFKM2,RKAKM2,RKCKM2,TKM2,KODKM2,
     2 BETKM1,D1KM1,DKM1,FSQKM1,HSQKM1,B1KM1,DXNKM1,ALFKM1,
     3 RKAKM1,RKCKM1,TKM1,KODKM1,
     4 PGRESS,PRELIN
C
C     COMMON VARIABLES CONTAINING INFORMATION OF RESTART STEPS
C
      DOUBLE PRECISION
     *    BESTRK,BESTPG
      INTEGER NRREST,LATTRY
      COMMON /BACK/ BESTRK,BESTPG, NRREST,LATTRY
C
C     COMMON VARIABLES CONTAINING MACHINE DEPENDENT CONSTANTS
C     DRELPR = DOUBLE RELATIVE PRECISION
C
      DOUBLE PRECISION
     *    DRELPR
      COMMON /MACHIN/ DRELPR
C
C     THIS PROGRAM PACKAGE USES THE FOLLOWING LINPACK AND BLAS ROUTINES
C
C     DPOSL,DCHDC,DNRM2,DAXPY,DDOT,DSWAP
C
C
C     INTERNAL VARIABLES
C
      INTEGER I,MDC,MDA,MDG,MDF,SCALE,BND,
     1 MP1,MP2,MP3,MP4,MP5,MP6,MP7,MP8,MP9,MP10,
     2 M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11
      DOUBLE PRECISION
     *     ROOTSP
      LOGICAL SEC
C
C     COMPUTE DOUBLE RELATIVE PRECISION
C
      CALL RELEPS(DRELPR)
      ROOTSP=DSQRT(DRELPR)
C
C     VALIDATE SOME INPUT VALUES
C
      EXIT=0
      BND=MIN0(L,N)
      IF((L.GT.P).AND.(MDR.LT.(N*(M+2*N+L+6)+3*M+5*L+MAX0(L,N)+
     1       4*BND)+7)) EXIT=-1
      IF((L.EQ.P).AND.(MDR.LT.(N*(M+N+L+6)+3*M+5*L+MAX0(L,N)+4*BND)+7))
     1       EXIT=-1
      IF(MDI.LT.(2*(L+BND)+N+13)) EXIT=-1
      IF(EXIT.LT.0) RETURN
C
C     SET DEFAULT VALUES OF MISSING PARAMETERS
C
      MDC=M
      MDA=L
      MDG=N
      MDF=N
      IF(WINT(1).LT.0) WINT(1)=1
      IF(WINT(2).LT.0) WINT(2)=10
      IF(WINT(3).LT.0) WINT(3)=20*N
      IF(WINT(4).LT.0) WINT(4)=2
      IF(WINT(4).NE.2) WINT(4)=0
      SCALE=1
      IF(WINT(5).LT.0) SCALE=0
      SEC=WINT(6).LT.0
      IF(WREAL(1).LT.DRELPR) WREAL(1)=ROOTSP
      IF(WREAL(2).LT. 0.0D0) WREAL(2)=ROOTSP
      IF(WREAL(3).LT. 0.0D0) WREAL(3)=DRELPR
      IF(WREAL(4).LT. 0.0D0) WREAL(4)=ROOTSP
      IF(WREAL(5).LT. 0.0D0) WREAL(5)=ROOTSP
      IF(L.LE.0) GOTO 20
      DO 10 I=1,L
         IF(WREAL(I+7).LT. 0.0) WREAL(I+7)=0.0D0
   10 CONTINUE
   20 CONTINUE
C
C     SET UP INDEX BOUNDS FOR ARRAYS
C
      MP1=2*BND
      MP2=MP1+N
      MP3=MP2+L
      MP4=L+BND
      MP5=MP4+BND
      MP6=MP5+BND
      MP7=MP6+N
      MP8=MP7+N
      MP9=MP8+N
      MP10=MP9+N
      M1=MP10+BND
      M2=M1+N
      M3=M2+MAX0(L,N)
      M4=M3+L
      M5=M4+L*N
      M6=M5+M+L
      M7=M6+M+L
      M8=M7+M+L
      M9=M8+M*N
      M10=M9+N*N
      IF(P.EQ.L) M10=M9
      M11=M10+N*N
C
C     THE WORKING AREA WREAL() IS STRUCTURED IN THE FOLLOWING WAY
C
C     TOL = WREAL(1)
C     EPSREL = WREAL(2)
C     EPSABS = WREAL(3)
C     EPSX = WREAL(4)
C     EPSH = WREAL(5)
C     PHI = WREAL(6)
C     SPEED = WREAL(7)
C      W = WREAL(8)......WREAL(L+7)
C      B = WREAL(L+8)......WREAL(L+BND+7)
C     D1 = WREAL(L+BND+8).......WREAL(L+2*BND+7)
C     D2 = WREAL(L+2*BND+8).........WREAL(L+3*BND+7)
C     D3 = WREAL(L+3*BND+8).........WREAL(L+3*BND+N+7)
C      G = WREAL(L+3*BND+N+8).......WREAL(L+3*BND+2*N+7)
C     PIVOT = WREAL(L+3*BND+2*N+8)........WREAL(L+3*BND+3*N+7)
C     DX = WREAL(L+3*BND+3*N+8).....WREAL(L+3*BND+4*N+7)
C      V = WREAL(L+3*BND+4*N+8).....WREAL(L+4*BND+4*N+7)
C      U = WREAL(M1+8).....WREAL(M1+7+N)
C      S = WREAL(M2+8).....WREAL(M2+7+MAX(L,N))
C     WOLD = WREAL(M3+8).......WREAL(M3+7+L)
C      A = WREAL(M4+8).......WREAL(M4+7+L*N)
C      D = WREAL(M5+8)......WREAL(M5+7+M+L)
C     V1 = WREAL(M6+8)..........WREAL(M6+7+M+L)
C     V2 = WREAL(M7+8)...........WREAL(M7+7+M+L)
C      C = WREAL(M8+8).........WREAL(M8+7+M*N)
C     FMAT = WREAL(M9+8)......WREAL(M10+7)
C     GMAT = WREAL(M10+8)........WREAL(M10+N*N+7)
C     DIAG = WREAL(M10+N*N+8)......WREAL(M10+N*N+N+7)
C
C     THE WORKING AREA WINT() IS STRUCTURED IN THE FOLLOWING WAY
C
C     IPRINT = WINT(1)
C     NOUT = WINT(2)
C     MAXIT = WINT(3)
C     NORM = WINT(4)
C     SCALE = WINT(5)
C     SEC = WINT(6)
C     ITER = WINT(7)
C     FUNCEV = WINT(8)
C     JACEV = WINT(9)
C     SECEV = WINT(10)
C     LINEV = WINT(11)
C     RANKA = WINT(12)
C     RANK = WINT(13)
C     P1 = WINT(14)...................WINT(BND+13)
C     P2 = WINT(BND+14)...............WINT(2*BND+13)
C     P3 = WINT(2*BND+14).............WINT(2*BND+N+13)
C     INACT = WINT(2*BND+N+14)........WINT(2*BND+N+L+13)
C     P4 = WINT(2*BND+N+L+14).........WINT(2*BND+N+2*L+13)
C
C     CALL NLSNIP TO MINIMIZE
C
      CALL NLSNIP(X,N,MDC,MDA,MDG,MDF,M,P,L,WREAL(1),WREAL(8),
     1 WREAL(2),WREAL(3),WREAL(4),WREAL(5),WINT(1),WINT(2),WINT(3),
     2 WINT(4),SCALE,SEC,FFUNC,HFUNC,
     3 EXIT,WREAL(6),WINT(7),WINT(8),WINT(9),WINT(10),WINT(11),
     4 WINT(12),WINT(13),F,H,ACTIVE,WREAL(7),
     5 WINT(14),WINT(BND+14),WINT(MP1+14),WINT(MP2+14),WINT(MP3+14),
     6 WREAL(L+8),WREAL(MP4+8),WREAL(MP5+8),WREAL(MP6+8),WREAL(M11+8),
     7 WREAL(MP7+8),WREAL(MP8+8),
     8 WREAL(MP9+8),WREAL(MP10+8),WREAL(M1+8),WREAL(M2+8),WREAL(M3+8),
     9 WREAL(M4+8),WREAL(M5+8),
     * WREAL(M6+8),WREAL(M7+8),WREAL(M8+8),WREAL(M9+8),WREAL(M10+8))
      RETURN
      END
